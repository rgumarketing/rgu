import React, { useCallback, useEffect, useMemo, useState } from "react";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Label } from "@/components/ui/label";
import { ChevronRight, Building2, ClipboardList, Users, FileText, Search, Plus, Download, CheckCircle2, Workflow, ClipboardCheck, Wrench, Settings2, Fuel, HardHat, Construction, Truck, Shield, Warehouse, ClipboardSignature, PenSquare, Loader2, MapPin, AlertCircle } from "lucide-react";

// ---------------------------------------------
// RGU MARKETING — ORGANIZATIONAL CHART (Interactive)
// Single-file React component. Tailwind + shadcn/ui.
// Click any role card to view: Obligations, Tasks/Functions, and Clickable Forms/Templates.
// All templates open as plain-text (Notepad-friendly) for easy copy-paste.
// ---------------------------------------------

// Utility: Simple, copyable plain-text modal for forms/templates
const TemplateModal = ({ open, onOpenChange, title, body }: { open: boolean; onOpenChange: (v: boolean) => void; title: string; body: string; }) => {
  const [copied, setCopied] = useState(false);
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold">{title}</DialogTitle>
          <DialogDescription className="text-muted-foreground">Copy, edit, or save. Format kept simple for Notepad.</DialogDescription>
        </DialogHeader>
        <div className="space-y-3">
          <Textarea
            className="min-h-[360px] font-mono text-sm"
            defaultValue={body}
          />
          <div className="flex items-center gap-2 justify-end">
            <Button
              variant="secondary"
              onClick={() => {
                navigator.clipboard.writeText(body);
                setCopied(true);
                setTimeout(() => setCopied(false), 2000);
              }}
            >
              {copied ? <CheckCircle2 className="mr-2 h-4 w-4"/> : <ClipboardCheck className="mr-2 h-4 w-4"/>}
              {copied ? "Copied" : "Copy to clipboard"}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

// Plain-text templates (minimalistic, ISO/DPWH-friendly headings)
const templates = {
  jobOrder: (data?: any) => `RGU MARKETING — JOB ORDER\nDate: __________\nProject: __________ (Contract ID if DPWH: __________)\nLocation: __________\nRequested By: __________\nApproved By: __________\n\nWORK DETAILS:\n- Task Title: __________\n- Scope/Instructions: __________________________________________\n- Start: __________  End: __________  Duration: __________\n- Crew/Personnel: __________________________________________\n\nRESOURCES:\n- Materials: __________________________________________\n- Equipment: __________________________________________\n- Fuel/Lubes: __________________________________________\n\nATTACHMENTS REQUIRED:\n[ ] Site Sketch   [ ] BOQ Ref   [ ] Safety JHA   [ ] Permits\n\nVERIFICATION & SIGN-OFF:\nPrepared: __________   Verified: __________   Approved: __________\n` ,
  materialRequest: () => `RGU MARKETING — MATERIAL REQUEST (MR)\nDate: __________\nProject: __________\nRequested By: __________ (Role: __________)\nNeeded On: __________ (ETA to Site: __________)\n\nITEMS:\n1) __________ | Qty: ___ | Unit: ___ | Specs/Brand: ___ | BOQ Ref: ___\n2) __________ | Qty: ___ | Unit: ___ | Specs/Brand: ___ | BOQ Ref: ___\n\nDELIVERY / PICKUP:\n- Supplier: __________  PR/PO No.: __________\n- Warehouse Check: [ ] Available [ ] Not Available\n\nApprovals: Requester → PE → PM/AMO\n` ,
  equipmentRequest: () => `RGU MARKETING — EQUIPMENT REQUEST (ER)\nDate: __________\nProject: __________\nRequested By: __________\n\nEQUIPMENT NEEDED:\n- Type: __________  Qty: ___  Operator: [ ] Yes [ ] No\n- Start: __________  End: __________  Shift Hours: __________\n- Hauling Required: [ ] Yes [ ] No  Location: __________\n\nFuel Plan: __________  Charge To: __________\nApprovals: Foreman → PE → Dispatcher/PM\n` ,
  fuelSlip: () => `RGU MARKETING — FUEL SLIP\nDate: __________\nProject/Plate: __________\nEquipment/Vehicle: __________  Operator/Driver: __________\nLiters: ___  Purpose: __________  Issued By: __________\nReceiver Signature: __________  Verifier: __________\n` ,
  timesheet: () => `RGU MARKETING — DAILY TIMESHEET\nDate: __________  Project: __________\nName | Role | Time In | Time Out | Hours | Verified By\n-----|------|---------|----------|-------|-----------\n\nNotes/Weather: __________________________________________\n` ,
  dar: () => `RGU MARKETING — DAILY ACCOMPLISHMENT REPORT (DAR)\nDate: __________  Project: __________\nActivities:\n- __________ (Qty/Units: ___)\n- __________ (Qty/Units: ___)\nMaterials Used: __________\nEquipment Used: __________ (Hours: ___)\nIssues/Delays: __________  Corrective Action: __________\nVerified By: __________  Approved: __________\n` ,
  siteInstruction: () => `RGU MARKETING — SITE INSTRUCTION (SI)\nDate: __________  Project: __________\nInstruction To: __________  From: __________\nInstruction Details: __________________________________________\nEffective On: __________  Safety Checks Done: [ ] Yes\nAcknowledged By: __________  Verifier: __________\n` ,
  ncr: () => `RGU MARKETING — NONCONFORMANCE REPORT (NCR)\nDate: __________  Project: __________\nRef: __________  Detected By: __________\nDescription of NC: __________________________________________\nImmediate Containment: __________\nRoot Cause (5-Why): __________\nCorrective Action: __________  Target Date: __________\nVerified Closed By: __________\n` ,
  incident: () => `RGU MARKETING — INCIDENT/NEAR-MISS REPORT\nDate/Time: __________  Project: __________\nPersons Involved: __________  Injury: [ ] Yes [ ] No\nDescription: __________________________________________\nImmediate Action: __________  Preventive Action: __________\nReported To DOLE/Authorities: [ ] N/A [ ] Yes (Ref No: ___)\n` ,
  purchaseOrder: () => `RGU MARKETING — PURCHASE ORDER (PO)\nDate: __________  PO No.: __________\nSupplier: __________  Address: __________\nDeliver To: __________ (Project/Warehouse)\n\nITEM | QTY | UNIT | UNIT PRICE | AMOUNT\n---- | --- | ---- | ---------- | ------\n\nTerms: __________  Delivery Date: __________\nApproved By: __________  Received By: __________\n` ,
  pettyCash: () => `RGU MARKETING — PETTY CASH VOUCHER (PCV)\nDate: __________  PCV No.: __________\nPayee: __________  Purpose: __________\nAmount: PHP __________ (₱______)\nCharged To: Project __________ / Dept __________\nRequested By: __________  Approved By: __________  Liquidation Due: __________\n` ,
  gatePass: () => `RGU MARKETING — GATE PASS (IN/OUT)\nDate: __________  Type: [ ] IN [ ] OUT\nItem/Equipment: __________  Qty: ___  Serial/Plate: __________\nFrom: __________  To: __________\nReason: __________  Approved By: __________  Checker: __________\n` ,
  deliveryReceipt: () => `RGU MARKETING — DELIVERY RECEIPT (DR)\nDate: __________  DR No.: __________\nDelivered To: __________ (Project/Warehouse)\nSupplier/From: __________  Vehicle/Plate: __________\n\nITEM | QTY | UNIT | REMARKS\n---- | --- | ---- | -------\n\nReceived By: __________  Time: __________  Condition: __________\n` ,
};

const CIVIL_WORKS_API_URL = "https://dpwhapps.azurewebsites.net/api/Procurement/InvitationToBid";
const LOCAL_STORAGE_KNOWN_IDS_KEY = "rgu-civil-works-known-project-ids";
const LOCAL_STORAGE_OFFICE_KEY = "rgu-civil-works-office";
const LOCAL_STORAGE_API_KEY = "rgu-civil-works-api-endpoint";
const DEFAULT_OFFICE = "Zamboanga del Norte 3rd District Engineering Office";

type CivilWorksItbRecord = {
  projectId: string;
  title: string;
  office: string;
  category?: string;
  closingDate?: string;
  closingDateObj?: Date | null;
  postedDate?: string;
  location?: string;
  fileUrl?: string;
  lat?: number;
  lng?: number;
  raw?: any;
};

const readLocalStorage = (key: string, fallback = "") => {
  if (typeof window === "undefined") return fallback;
  try {
    const value = window.localStorage.getItem(key);
    return value ?? fallback;
  } catch (error) {
    console.warn("Unable to read localStorage", error);
    return fallback;
  }
};

const writeLocalStorage = (key: string, value: string) => {
  if (typeof window === "undefined") return;
  try {
    window.localStorage.setItem(key, value);
  } catch (error) {
    console.warn("Unable to write localStorage", error);
  }
};

const pickString = (source: any, keys: string[]): string | undefined => {
  if (!source || typeof source !== "object") return undefined;
  for (const key of keys) {
    const value = source[key];
    if (typeof value === "string" && value.trim()) {
      return value.trim();
    }
    if (value && typeof value === "object") {
      if (typeof value.url === "string" && value.url.trim()) return value.url.trim();
      if (typeof value.href === "string" && value.href.trim()) return value.href.trim();
      if (Array.isArray(value)) {
        for (const item of value) {
          const nested = pickString(item, ["url", "href", "link", "value"]);
          if (nested) return nested;
        }
      }
    }
  }
  return undefined;
};

const pickNumber = (source: any, keys: string[]): number | undefined => {
  if (!source || typeof source !== "object") return undefined;
  for (const key of keys) {
    const value = source[key];
    if (typeof value === "number" && !Number.isNaN(value)) return value;
    if (typeof value === "string" && value.trim()) {
      const parsed = Number(value.replace(/[^0-9.+-]/g, ""));
      if (!Number.isNaN(parsed)) return parsed;
    }
  }
  return undefined;
};

const parseFlexibleDate = (input: any): Date | null => {
  if (!input) return null;
  if (input instanceof Date) return Number.isNaN(input.valueOf()) ? null : input;
  if (typeof input === "number") {
    const numericDate = new Date(input);
    return Number.isNaN(numericDate.valueOf()) ? null : numericDate;
  }
  if (typeof input !== "string") return null;
  const trimmed = input.trim();
  if (!trimmed) return null;
  const numeric = Number(trimmed);
  if (!Number.isNaN(numeric) && trimmed.length >= 5) {
    const numericDate = new Date(numeric);
    if (!Number.isNaN(numericDate.valueOf())) return numericDate;
  }
  let parsed = new Date(trimmed);
  if (!Number.isNaN(parsed.valueOf())) return parsed;
  const isoMatch = trimmed.match(/^(\d{1,2})[\/-](\d{1,2})[\/-](\d{2,4})(.*)$/);
  if (isoMatch) {
    const [, partA, partB, partYear, rest] = isoMatch;
    let month = parseInt(partA, 10);
    let day = parseInt(partB, 10);
    if (month > 12 && day <= 12) {
      [month, day] = [day, month];
    }
    const year = partYear.length === 2 ? Number(`20${partYear}`) : Number(partYear);
    const suffix = rest?.trim() ? ` ${rest.trim()}` : "";
    parsed = new Date(`${year}-${String(month).padStart(2, "0")}-${String(day).padStart(2, "0")}${suffix}`);
    if (!Number.isNaN(parsed.valueOf())) return parsed;
  }
  return null;
};

const ensureAbsoluteUrl = (input?: string): string | undefined => {
  if (!input) return undefined;
  const trimmed = input.trim();
  if (!trimmed) return undefined;
  if (/^https?:\/\//i.test(trimmed)) return trimmed;
  if (trimmed.startsWith("//")) return `https:${trimmed}`;
  return trimmed;
};

const toRecordArray = (payload: any): any[] => {
  if (!payload) return [];
  if (Array.isArray(payload)) return payload;
  if (Array.isArray(payload?.value)) return payload.value;
  if (Array.isArray(payload?.results)) return payload.results;
  if (Array.isArray(payload?.data)) return payload.data;
  if (Array.isArray(payload?.items)) return payload.items;
  if (Array.isArray(payload?.Records)) return payload.Records;
  return [];
};

const normalizeItbRecords = (payload: any): CivilWorksItbRecord[] => {
  const rawRecords = toRecordArray(payload);
  return rawRecords.map((item: any) => {
    const projectId =
      pickString(item, [
        "projectId",
        "ProjectID",
        "project_id",
        "projectID",
        "project_no",
        "ProjectNo",
        "projectNo",
        "projectNumber",
        "ProjectNumber",
        "contractId",
        "ContractId",
        "ContractID",
        "contract_no",
        "ContractNo",
        "contractNumber",
        "referenceNo",
        "ReferenceNo",
        "projectCode",
        "ProjectCode",
        "project_code",
        "PhilGEPSRefNo",
      ]) || "";
    const closingDateRaw =
      pickString(item, [
        "closingDate",
        "ClosingDate",
        "closing_date",
        "bidClosingDate",
        "BidClosingDate",
        "submissionDeadline",
        "SubmissionDeadline",
        "deadline",
        "Deadline",
        "bidSubmissionDeadline",
        "BidSubmissionDeadline",
        "bidOpening",
        "BidOpening",
        "closingDateTime",
        "ClosingDateTime",
      ]) || undefined;
    const closingDateObj = parseFlexibleDate(closingDateRaw);
    const location =
      pickString(item, [
        "projectLocation",
        "ProjectLocation",
        "location",
        "Location",
        "Project_Location",
        "Place",
        "place",
        "municipality",
        "Municipality",
        "province",
        "Province",
      ]) || undefined;
    const category =
      pickString(item, [
        "category",
        "Category",
        "advertisementType",
        "AdvertisementType",
        "procurementType",
        "ProcurementType",
        "projectType",
        "ProjectType",
        "type",
        "Type",
      ]) || undefined;
    const office =
      pickString(item, [
        "office",
        "Office",
        "implementingOffice",
        "ImplementingOffice",
        "procuringEntity",
        "ProcuringEntity",
        "procuringOffice",
        "ProcuringOffice",
        "districtEngineeringOffice",
        "DistrictEngineeringOffice",
        "implementing_unit",
      ]) || "";
    const title =
      pickString(item, [
        "title",
        "Title",
        "projectTitle",
        "ProjectTitle",
        "projectName",
        "ProjectName",
        "name",
        "Name",
        "contractName",
        "ContractName",
        "project",
        "Project",
      ]) || "Untitled Civil Works Project";
    const fileUrl =
      ensureAbsoluteUrl(
        pickString(item, [
          "file",
          "File",
          "fileUrl",
          "FileUrl",
          "documentUrl",
          "DocumentUrl",
          "attachment",
          "Attachment",
          "attachmentUrl",
          "AttachmentUrl",
          "link",
          "Link",
          "url",
          "Url",
          "downloadUrl",
          "DownloadUrl",
        ])
      ) || undefined;
    const postedDate =
      pickString(item, [
        "postingDate",
        "PostingDate",
        "publishedDate",
        "PublishedDate",
        "advertisementDate",
        "AdvertisementDate",
        "startDate",
        "StartDate",
        "publicationDate",
        "PublicationDate",
      ]) || undefined;
    const lat = pickNumber(item, ["latitude", "Latitude", "lat", "Lat"]);
    const lng = pickNumber(item, ["longitude", "Longitude", "lng", "Lng", "long", "Long"]);
    const fallbackId = [projectId, title, closingDateRaw].filter(Boolean).join("::");

    return {
      projectId: fallbackId || `CW-${Math.random().toString(36).slice(2, 10).toUpperCase()}`,
      title,
      office,
      category,
      closingDate: closingDateRaw,
      closingDateObj,
      postedDate,
      location,
      fileUrl,
      lat,
      lng,
      raw: item,
    };
  });
};

const computeMapUrl = (record: CivilWorksItbRecord): string | null => {
  if (typeof record.lat === "number" && typeof record.lng === "number") {
    return `https://www.google.com/maps/search/?api=1&query=${record.lat},${record.lng}`;
  }
  if (record.location) {
    return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(record.location)}`;
  }
  if (record.raw) {
    const nestedLocation =
      pickString(record.raw, ["city", "City", "municipality", "Municipality", "barangay", "Barangay"]) || undefined;
    if (nestedLocation) {
      return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(nestedLocation)}`;
    }
  }
  return null;
};

const formatDateDisplay = (date: Date | null | undefined, fallback?: string) => {
  if (date && !Number.isNaN(date.valueOf())) {
    try {
      return date.toLocaleString(undefined, {
        year: "numeric",
        month: "short",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch {
      return date.toISOString();
    }
  }
  return fallback || "—";
};

const buildCivilWorksRequestUrl = (base: string) => {
  try {
    const url = new URL(base);
    if (!url.searchParams.has("advertisementType")) {
      url.searchParams.set("advertisementType", "Civil Works");
    }
    return url.toString();
  } catch {
    return base;
  }
};

// Organization roles and mapping to frequently used templates
const ROLE_CATALOG = [
  {
    id: "amo",
    title: "Authorized Managing Officer",
    dept: "Executive",
    icon: Building2,
    summary: "Leads company direction, approvals, and compliance.",
    obligations: [
      "Approve contracts, POs, high-value disbursements",
      "Ensure ISO 9001:2015 & DPWH standards are embedded",
      "Sign off on key HR appointments and discipline",
      "Risk management and stakeholder coordination"
    ],
    functions: [
      "Weekly review: project KPIs, cashflow, procurement",
      "Escalation point for NCRs and incidents",
      "Approve org policies and audit schedules"
    ],
    forms: ["purchaseOrder", "pettyCash", "ncr", "incident"],
  },
  {
    id: "pm",
    title: "Project Manager",
    dept: "Projects",
    icon: Workflow,
    summary: "Owns project delivery, budget, and schedule.",
    obligations: [
      "Hit timeline, quality, and cost targets",
      "Approve Job Orders and Site Instructions",
      "Coordinate with DPWH and LGUs; manage change orders",
    ],
    functions: [
      "Create lookahead schedules and manpower plans",
      "Chair daily huddles; review DAR and timesheets",
      "Verify BOQ alignment and progress billing",
    ],
    forms: ["jobOrder", "siteInstruction", "dar", "timesheet"],
  },
  {
    id: "pe",
    title: "Project Engineer",
    dept: "Engineering",
    icon: Settings2,
    summary: "Translates plans to executable tasks with QA/QC.",
    obligations: [
      "Prepare Job Orders, method statements, ITP",
      "QA/QC checks; quantity take-off; DPR/DAR review",
      "Coordinate materials, equipment, and permits"
    ],
    functions: [
      "Update drawings/as-builts; prepare SI and RFI",
      "Daily verify quantities vs BOQ",
      "Support billing documentation"
    ],
    forms: ["jobOrder", "materialRequest", "equipmentRequest", "siteInstruction", "dar"],
  },
  {
    id: "foreman",
    title: "Foreman",
    dept: "Operations",
    icon: HardHat,
    summary: "Leads crew execution and site records.",
    obligations: [
      "Execute Job Orders and enforce safety",
      "Keep daily logbook, DAR, and timesheets",
      "Account for materials/tools issuance and return"
    ],
    functions: [
      "Brief crew; assign tasks; confirm outputs",
      "Request materials/equipment and fuel slips",
      "Coordinate with PE on inspections"
    ],
    forms: ["dar", "timesheet", "fuelSlip", "materialRequest", "equipmentRequest", "gatePass"],
  },
  {
    id: "safety",
    title: "Safety Officer",
    dept: "HSE",
    icon: Shield,
    summary: "Ensures compliance with DOLE/DPR safety rules.",
    obligations: [
      "Toolbox talks; JHA; incident/NCR handling",
      "PPE enforcement; equipment safety checks",
      "Daily safety walk and permits"
    ],
    functions: [
      "Maintain safety records; coordinate trainings",
      "Lead accident investigation and CAPA",
      "Report to PM/AMO weekly"
    ],
    forms: ["incident", "ncr", "siteInstruction"],
  },
  {
    id: "dispatcher",
    title: "Equipment Dispatcher",
    dept: "Plant & Fleet",
    icon: Truck,
    summary: "Assigns equipment, operators, and fuel.",
    obligations: [
      "Schedule equipment; track hours & maintenance",
      "Issue fuel slips; verify trip tickets",
      "Coordinate with warehouse and site"
    ],
    functions: [
      "Maintain equipment log and PMS calendar",
      "Dispatch records for billing/charge-outs",
      "Operator certifications tracking"
    ],
    forms: ["equipmentRequest", "fuelSlip", "gatePass", "deliveryReceipt"],
  },
  {
    id: "warehouse",
    title: "Warehouse/Storekeeper",
    dept: "Warehouse",
    icon: Warehouse,
    summary: "Controls materials and tool issuance.",
    obligations: [
      "Receive, inspect, and record deliveries",
      "Issue materials/tools vs MR/JO; prevent loss",
      "Cycle count and reorder alerts"
    ],
    functions: [
      "Maintain DR/IR, stock cards, and bin locations",
      "Return & repair process; gate pass control",
      "Coordinate with Procurement"
    ],
    forms: ["materialRequest", "deliveryReceipt", "gatePass"],
  },
  {
    id: "procurement",
    title: "Procurement Officer",
    dept: "Supply Chain",
    icon: ClipboardSignature,
    summary: "Sources and purchases per BOQ/specs.",
    obligations: [
      "Request for Quotation; PO issuance",
      "Supplier vetting; 3-quote policy",
      "Delivery follow-up and variance handling"
    ],
    functions: [
      "Coordinate with PE/PM on needed dates",
      "Maintain supplier master and price book",
      "Ensure documents for DPWH auditing"
    ],
    forms: ["purchaseOrder", "deliveryReceipt", "materialRequest"],
  },
  {
    id: "hr",
    title: "HR/Admin",
    dept: "Admin",
    icon: Users,
    summary: "Manpower, payroll, and compliance files.",
    obligations: [
      "Hiring, onboarding; contracts and memos",
      "Timekeeping & payroll support",
      "Record control as per ISO"
    ],
    functions: [
      "Maintain 201 files; training matrix",
      "Implement policies and appraisal cycles",
      "Support site with forms and slips"
    ],
    forms: ["timesheet", "pettyCash"],
  },
  {
    id: "bookkeeper",
    title: "Accountant/Bookkeeper",
    dept: "Finance",
    icon: FileText,
    summary: "Handles disbursements, SOAs, and audits.",
    obligations: [
      "Validate PCV, DR, PO; maintain ledgers",
      "Prepare billing; taxes and statutory filings",
      "Cash flow and cost control with PM"
    ],
    functions: [
      "Reconcile suppliers and payroll",
      "Maintain project cost codes (Zoho Books)",
      "Support DPWH billing compliance"
    ],
    forms: ["pettyCash", "purchaseOrder", "deliveryReceipt"],
  },
  {
    id: "docctrl",
    title: "Document Controller",
    dept: "QA/QC",
    icon: ClipboardList,
    summary: "Controls document versions and filing.",
    obligations: [
      "Register and archive JOs, SI, NCR, DAR",
      "Issue controlled templates and logs",
      "Maintain ISO Master List"
    ],
    functions: [
      "Numbering system; retrieval on audits",
      "Distribute latest revisions to site",
      "Weekly document health check"
    ],
    forms: ["siteInstruction", "ncr", "dar", "deliveryReceipt"],
  },
];

// Helper: map template key to label/icon
const TEMPLATE_META: Record<string, { label: string; }> = {
  jobOrder: { label: "Job Order" },
  materialRequest: { label: "Material Request" },
  equipmentRequest: { label: "Equipment Request" },
  fuelSlip: { label: "Fuel Slip" },
  timesheet: { label: "Daily Timesheet" },
  dar: { label: "Daily Accomplishment Report" },
  siteInstruction: { label: "Site Instruction" },
  ncr: { label: "Nonconformance Report" },
  incident: { label: "Incident Report" },
  purchaseOrder: { label: "Purchase Order" },
  pettyCash: { label: "Petty Cash Voucher" },
  gatePass: { label: "Gate Pass" },
  deliveryReceipt: { label: "Delivery Receipt" },
};

const RoleCard = ({ role, onOpen }: any) => {
  const Icon = role.icon || Users;
  return (
    <Card
      className="group hover:shadow-lg transition-shadow cursor-pointer"
      onClick={() => onOpen(role)}
    >
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Icon className="h-5 w-5" />
            <CardTitle className="text-base">{role.title}</CardTitle>
          </div>
          <Badge variant="secondary">{role.dept}</Badge>
        </div>
      </CardHeader>
      <CardContent className="text-sm text-muted-foreground flex items-center justify-between">
        <span>{role.summary}</span>
        <ChevronRight className="h-4 w-4 opacity-50 group-hover:opacity-100" />
      </CardContent>
    </Card>
  );
};

export default function App() {
  const [itbApiUrl, setItbApiUrl] = useState<string>(() => readLocalStorage(LOCAL_STORAGE_API_KEY, CIVIL_WORKS_API_URL));
  const [officeFilter, setOfficeFilter] = useState<string>(() => readLocalStorage(LOCAL_STORAGE_OFFICE_KEY, DEFAULT_OFFICE));
  const [knownIdsInput, setKnownIdsInput] = useState<string>(() => readLocalStorage(LOCAL_STORAGE_KNOWN_IDS_KEY, ""));
  const [rawItbRecords, setRawItbRecords] = useState<CivilWorksItbRecord[]>([]);
  const [itbLoading, setItbLoading] = useState(false);
  const [itbError, setItbError] = useState<string | null>(null);
  const [lastFetchedAt, setLastFetchedAt] = useState<Date | null>(null);
  const [sourceRecordCount, setSourceRecordCount] = useState<number | null>(null);
  const [query, setQuery] = useState("");
  const [activeRole, setActiveRole] = useState<any | null>(null);
  const [tmplOpen, setTmplOpen] = useState<{ key: string | null; open: boolean }>({ key: null, open: false });

  useEffect(() => {
    writeLocalStorage(LOCAL_STORAGE_API_KEY, itbApiUrl);
  }, [itbApiUrl]);

  useEffect(() => {
    writeLocalStorage(LOCAL_STORAGE_OFFICE_KEY, officeFilter);
  }, [officeFilter]);

  useEffect(() => {
    writeLocalStorage(LOCAL_STORAGE_KNOWN_IDS_KEY, knownIdsInput);
  }, [knownIdsInput]);

  const knownProjectIds = useMemo(() => {
    const tokens = knownIdsInput
      .split(/[\n\r,;\t]+/)
      .map((token) => token.trim().toUpperCase())
      .filter(Boolean);
    return Array.from(new Set(tokens));
  }, [knownIdsInput]);

  const knownProjectIdSet = useMemo(() => new Set(knownProjectIds), [knownProjectIds]);

  const filteredItbRecords = useMemo(() => {
    const now = new Date();
    const officeNeedle = officeFilter.trim().toLowerCase();
    return rawItbRecords.filter((record) => {
      const categoryLabel = `${record.category || ""}`.toLowerCase();
      const titleLabel = record.title.toLowerCase();
      const isCivilWorks = categoryLabel.includes("civil work") || titleLabel.includes("civil work");
      if (!isCivilWorks) return false;
      const officeLabel = (record.office || "").toLowerCase();
      if (officeNeedle && !officeLabel.includes(officeNeedle)) return false;
      const closingDate = record.closingDateObj ?? parseFlexibleDate(record.closingDate);
      if (closingDate && closingDate.getTime() < now.getTime()) return false;
      const projectKey = (record.projectId || "").toUpperCase();
      if (projectKey && knownProjectIdSet.has(projectKey)) return false;
      return true;
    });
  }, [rawItbRecords, officeFilter, knownProjectIdSet]);

  const fetchCivilWorksRecords = useCallback(async () => {
    setItbLoading(true);
    setItbError(null);
    try {
      const requestUrl = buildCivilWorksRequestUrl(itbApiUrl);
      const response = await fetch(requestUrl);
      if (!response.ok) {
        throw new Error(`Failed to fetch Civil Works ITB (HTTP ${response.status})`);
      }
      const text = await response.text();
      let payload: any;
      try {
        payload = JSON.parse(text);
      } catch (error) {
        console.error("Unable to parse Civil Works ITB payload", error, text);
        throw new Error("Invalid JSON response from Civil Works ITB endpoint.");
      }
      const normalized = normalizeItbRecords(payload);
      setSourceRecordCount(normalized.length);
      setRawItbRecords(normalized);
      setLastFetchedAt(new Date());
    } catch (error: any) {
      setItbError(error?.message || "Unable to fetch Civil Works Invitations to Bid.");
      setRawItbRecords([]);
      setSourceRecordCount(null);
    } finally {
      setItbLoading(false);
    }
  }, [itbApiUrl]);

  useEffect(() => {
    if (typeof window !== "undefined") {
      fetchCivilWorksRecords().catch(() => undefined);
    }
  }, [fetchCivilWorksRecords]);

  const addKnownProjectId = useCallback((id: string) => {
    if (!id) return;
    const normalized = id.trim().toUpperCase();
    if (!normalized) return;
    setKnownIdsInput((prev) => {
      const existing = prev
        .split(/[\n\r,;\t]+/)
        .map((token) => token.trim().toUpperCase())
        .filter(Boolean);
      if (existing.includes(normalized)) return prev;
      const prefix = prev.trim().length > 0 ? `${prev.trim()}\n` : "";
      return `${prefix}${normalized}`;
    });
  }, []);

  const roles = useMemo(() => {
    if (!query) return ROLE_CATALOG;
    const q = query.toLowerCase();
    return ROLE_CATALOG.filter((r) =>
      [r.title, r.dept, r.summary, ...(r.obligations||[]), ...(r.functions||[])].join(" ").toLowerCase().includes(q)
    );
  }, [query]);

  const openTemplate = (key: string) => setTmplOpen({ key, open: true });

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-slate-50">
      <div className="max-w-7xl mx-auto px-4 py-6 sm:py-10">
        <header className="flex items-start sm:items-center justify-between gap-4 flex-col sm:flex-row">
          <div>
            <h1 className="text-2xl sm:text-3xl font-bold tracking-tight">RGU Organizational Chart</h1>
            <p className="text-sm text-muted-foreground mt-1">Click a role to view obligations, functions, and launch job-related templates.</p>
          </div>
          <div className="flex items-center gap-2 w-full sm:w-auto">
            <Input
              placeholder="Search roles, departments, duties..."
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              className="w-full sm:w-80"
            />
            <Button variant="secondary" className="hidden sm:flex"><Search className="h-4 w-4 mr-2"/>Search</Button>
          </div>
        </header>

        <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {roles.map((role) => (
            <RoleCard key={role.id} role={role} onOpen={setActiveRole} />
          ))}
          {roles.length === 0 && (
            <Card>
              <CardContent className="py-10 text-center text-muted-foreground">No matches. Try another keyword.</CardContent>
            </Card>
          )}
        </div>

        <div className="mt-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-base">
                <Construction className="h-5 w-5" />
                Civil Works ITB Watcher
              </CardTitle>
              <CardDescription>
                Monitor DPWH Civil Works invitations to bid, filter by district office, and surface only the notices you have
                not logged yet.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-4 md:grid-cols-3">
                <div className="md:col-span-2 space-y-2">
                  <Label htmlFor="civil-works-api">Civil Works ITB API endpoint</Label>
                  <Input
                    id="civil-works-api"
                    value={itbApiUrl}
                    onChange={(event) => setItbApiUrl(event.target.value)}
                    placeholder={CIVIL_WORKS_API_URL}
                  />
                  <p className="text-xs text-muted-foreground">
                    Requests automatically append <code>advertisementType=Civil Works</code>. Adjust only if DPWH publishes a
                    new endpoint.
                  </p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="civil-works-office">Target district office</Label>
                  <Input
                    id="civil-works-office"
                    value={officeFilter}
                    onChange={(event) => setOfficeFilter(event.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    Only records containing this office name (case-insensitive) remain in the list.
                  </p>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="civil-works-known">Tracked / logged project IDs</Label>
                <Textarea
                  id="civil-works-known"
                  value={knownIdsInput}
                  onChange={(event) => setKnownIdsInput(event.target.value)}
                  rows={4}
                  placeholder={`25JD0026\n25JD0027\n25JD0028`}
                />
                <p className="text-xs text-muted-foreground">
                  Separate IDs with commas or line breaks. Invitations whose project IDs appear here will be hidden from the
                  "new" list.
                </p>
              </div>
              <div className="flex flex-wrap items-center gap-3">
                <Button onClick={fetchCivilWorksRecords} disabled={itbLoading}>
                  {itbLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Download className="mr-2 h-4 w-4" />
                  )}
                  Fetch Civil Works ITB
                </Button>
                <span className="text-xs text-muted-foreground">
                  The fetch runs on page load; use the button to refresh manually when DPWH posts new notices.
                </span>
              </div>
              {itbError && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Unable to fetch invitations</AlertTitle>
                  <AlertDescription>{itbError}</AlertDescription>
                </Alert>
              )}
              <div className="space-y-4">
                {itbLoading && (
                  <div className="flex items-center gap-2 rounded-md border border-dashed p-4 text-sm text-muted-foreground">
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Loading Civil Works invitations...
                  </div>
                )}
                {!itbLoading && filteredItbRecords.length === 0 && (
                  <div className="rounded-md border border-dashed p-4 text-sm text-muted-foreground">
                    No new Civil Works invitations matched the office and closing-date filters.
                  </div>
                )}
                {filteredItbRecords.map((record) => {
                  const closingDate = record.closingDateObj ?? parseFlexibleDate(record.closingDate);
                  const postedDate = parseFlexibleDate(record.postedDate);
                  const mapUrl = computeMapUrl(record);
                  const key = record.projectId || record.title;
                  return (
                    <div key={key} className="space-y-3 rounded-lg border bg-white p-4 shadow-sm">
                      <div className="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
                        <div>
                          <h3 className="text-sm font-semibold sm:text-base">{record.title}</h3>
                          <div className="flex flex-wrap gap-2 text-xs text-muted-foreground">
                            <span>
                              <strong>ID:</strong> {record.projectId}
                            </span>
                            {record.office && <span className="hidden sm:inline">•</span>}
                            {record.office && <span>{record.office}</span>}
                          </div>
                        </div>
                        <Badge variant="secondary">Civil Works</Badge>
                      </div>
                      <div className="grid gap-2 text-xs text-muted-foreground sm:grid-cols-2">
                        <div>
                          <span className="font-medium text-foreground">Closing:</span> {formatDateDisplay(closingDate, record.closingDate)}
                        </div>
                        {record.location && (
                          <div>
                            <span className="font-medium text-foreground">Location:</span> {record.location}
                          </div>
                        )}
                        {postedDate && (
                          <div>
                            <span className="font-medium text-foreground">Posted:</span> {formatDateDisplay(postedDate, record.postedDate)}
                          </div>
                        )}
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {record.fileUrl ? (
                          <Button asChild size="sm">
                            <a href={record.fileUrl} target="_blank" rel="noopener noreferrer">
                              <Download className="mr-2 h-4 w-4" />
                              ITB File
                            </a>
                          </Button>
                        ) : (
                          <Badge variant="outline">No file link provided</Badge>
                        )}
                        {mapUrl && (
                          <Button asChild size="sm" variant="outline">
                            <a href={mapUrl} target="_blank" rel="noopener noreferrer">
                              <MapPin className="mr-2 h-4 w-4" />
                              Map location
                            </a>
                          </Button>
                        )}
                        {record.projectId && (
                          <Button size="sm" variant="ghost" onClick={() => addKnownProjectId(record.projectId)}>
                            <Plus className="mr-2 h-4 w-4" />
                            Mark as tracked
                          </Button>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
            <CardFooter className="flex flex-col gap-2 text-xs text-muted-foreground sm:flex-row sm:items-center sm:justify-between">
              <div className="flex flex-wrap items-center gap-2">
                <Badge variant="outline">Known IDs {knownProjectIds.length}</Badge>
                <Badge variant="outline">New {filteredItbRecords.length}</Badge>
                {typeof sourceRecordCount === "number" && <Badge variant="outline">Fetched {sourceRecordCount}</Badge>}
              </div>
              <div>Last fetch: {lastFetchedAt ? formatDateDisplay(lastFetchedAt) : "Not yet fetched"}</div>
            </CardFooter>
          </Card>
        </div>

        {/* Quick Launch */}
        <div className="mt-8">
          <Card className="border-dashed">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2"><PenSquare className="h-5 w-5"/> Quick Launch Templates</CardTitle>
            </CardHeader>
            <CardContent className="flex flex-wrap gap-2">
              {Object.entries(TEMPLATE_META).map(([key, meta]) => (
                <Button key={key} variant="outline" onClick={() => openTemplate(key)}>{meta.label}</Button>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Active Role Drawer/Modal */}
        <Dialog open={!!activeRole} onOpenChange={(o) => !o && setActiveRole(null)}>
          <DialogContent className="max-w-3xl">
            {activeRole && (
              <>
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-2">
                    {activeRole.icon ? React.createElement(activeRole.icon, { className: "h-5 w-5" }) : null}
                    {activeRole.title}
                  </DialogTitle>
                  <DialogDescription className="text-xs">Department: {activeRole.dept}</DialogDescription>
                </DialogHeader>
                <Tabs defaultValue="obligations" className="mt-2">
                  <TabsList>
                    <TabsTrigger value="obligations">Obligations</TabsTrigger>
                    <TabsTrigger value="functions">Functions</TabsTrigger>
                    <TabsTrigger value="forms">Forms & Templates</TabsTrigger>
                  </TabsList>
                  <TabsContent value="obligations" className="pt-3">
                    <ul className="list-disc pl-5 space-y-2 text-sm">
                      {activeRole.obligations?.map((o: string, i: number) => (
                        <li key={i}>{o}</li>
                      ))}
                    </ul>
                  </TabsContent>
                  <TabsContent value="functions" className="pt-3">
                    <ul className="list-disc pl-5 space-y-2 text-sm">
                      {activeRole.functions?.map((f: string, i: number) => (
                        <li key={i}>{f}</li>
                      ))}
                    </ul>
                  </TabsContent>
                  <TabsContent value="forms" className="pt-3">
                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                      {activeRole.forms?.map((k: string) => (
                        <Button key={k} variant="outline" onClick={() => openTemplate(k)}>
                          {TEMPLATE_META[k]?.label || k}
                        </Button>
                      ))}
                    </div>
                  </TabsContent>
                </Tabs>
              </>
            )}
          </DialogContent>
        </Dialog>

        {/* Template modal (single instance, switches by key) */}
        <TemplateModal
          open={tmplOpen.open}
          onOpenChange={(o) => setTmplOpen((s) => ({ ...s, open: o }))}
          title={tmplOpen.key ? TEMPLATE_META[tmplOpen.key]?.label : "Template"}
          body={tmplOpen.key ? (templates as any)[tmplOpen.key]() : ""}
        />

        {/* Footer notes for compliance */}
        <div className="mt-10 text-xs text-muted-foreground space-y-2">
          <Separator />
          <p><strong>Notes:</strong> Keep forms simple and version-controlled. Align with ISO 9001:2015 (Document Control, Nonconformance, Corrective Action) and DPWH documentation norms. Replace blanks with your project-specific details.</p>
          <p>Suggested filing: <code>RGU/Projects/[ContractID]/Forms/</code> with numbering (e.g., <code>25JD0026-JO-0001</code>).</p>
        </div>
      </div>
    </div>
  );
}
